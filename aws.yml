---
- name: A simple Load Balanced AWS server
  hosts: localhost 
  connection: local
  gather_facts: False
  tasks:
    - name: Create security group
      ec2_group:
        name: "demo_security_group"
        description: "demo security group"
        region: "{{ region }}"
        rules:
          - proto: tcp  # ssh
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp  # http
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
      register: demo_firewall

    - name: Create an EC2 instance
      ec2:
        key_name: "{{ pem_key }}"
        region: "{{ region }}"
        group_id: "{{ demo_firewall.group_id }}"
        instance_type: "{{ instance_type }}"
        image: "{{ ami }}"
        wait: yes
        instance_tags:
            test: "{{ test }}"
        count_tag: test
        exact_count: 2
        vpc_subnet_id: "{{ subnet1 }}"
        assign_public_ip: yes
      register: ec2

    - name: wait for the servers to appear on the network
      wait_for: host={{ item.public_dns_name }} port=22 delay=10 timeout=180 state=started
      with_items: '{{ ec2.tagged_instances }}'

    - name: add server ip addresses to hosts group
      add_host: hostname={{ item.public_ip }} groupname=launched
      with_items: '{{ ec2.tagged_instances }}'

- name: webservers (installs node js ...)
  hosts: launched[0]
  remote_user: ubuntu
  become: true
  become_method: sudo
  gather_facts: True
  roles:
    - server0

- name: webservers (installs node js ...)
  hosts: launched[1]
  remote_user: ubuntu
  become: true
  become_method: sudo
  gather_facts: True
  roles:
    - server1

- name: spin up the load balancer and add the servers to it
  hosts: 127.0.0.1
  connection: local
  gather_facts: False
  tasks:
    - name: add the webservers to the load balancer
      elb_target_group:
        name: mytargetgroup
        protocol: http
        vpc_id: "{{ vpc_id }}"
        port: 80
        #state: present
        targets:
          - Id: "{{ item }}"
            Port: 80
        wait_timeout: 30
        state: present
      with_items: '{{ ec2.tagged_instances.0.id }}'
    - name: register 2 target
      shell: aws elbv2 describe-target-groups | jq .TargetGroups[].TargetGroupArn | tr -d '"'
      register: arn
    - name: instance 1
      shell: aws ec2 describe-instances --filter Name=tag-key,Values=test |  jq .Reservations[].Instances[0].InstanceId | tr -d '"'
      register: id1
    - name: instance 2
      shell: aws ec2 describe-instances --filter Name=tag-key,Values=test |  jq .Reservations[].Instances[1].InstanceId | tr -d '"'
      register: id2
    - name: register targets
      shell: aws elbv2 register-targets --target-group-arn={{ arn.stdout }} --targets Id={{ id1.stdout }} Id={{ id2.stdout }}

    - name: setup a simple load balancer
      elb_application_lb:
        name: aws-elb-demo
        state: present
        region: us-east-1
        subnets:
          -  "{{ subnet1 }}"
          -  "{{ subnet2 }}"
        security_groups:
          - demo_security_group
        listeners:
          - Protocol: HTTP
            Port: 80
            DefaultActions:
               - Type: forward
                 TargetGroupName: mytargetgroup
            #instance_port: 80
      register: elb_application_lb
